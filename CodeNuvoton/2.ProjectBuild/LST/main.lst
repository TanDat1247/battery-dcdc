C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\1.LibNuvoton\Include) DEF
                    -INE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\main.lst) OBJECT(.\Output\main.obj)

line level    source

   1          #include "pjcommon.h"
   2          #include "Function_define.h"
   3          #include "string.h"
   4          
   5          volatile uint16_t sys_millis = 0;
   6          #define UART_BUFFER_MAX_CNT 100
   7          xdata char cUartBuffer[UART_BUFFER_MAX_CNT];
   8          
   9          ////////////////////
  10          #define STATE_0 0
  11          #define STATE_1 1
  12          #define STATE_2 2
  13          volatile uint8_t MainState = STATE_0;
  14          
  15          #define MAX_DUTY_BOOST 180   // Vin PWM min = 14.4 (13V=90%)
  16          #define MIN_DUTY_BOOST 154   // Vin max = 16.8V    (13V=77%)
  17          
  18          #define MAX_CYCLE 200
  19          #define VIN_OFFSET_ADC 1474             //13V
  20          #define VIN_THRESHOLD  1631     //14.4V
  21          
  22          void PwmSet(uint8_t Duty, uint8_t Enable);
  23          uint8_t Duty_Ctr = MAX_DUTY_BOOST;
  24          uint8_t OutputEnable = 0;
  25          
  26          uint16_t VoltageIn = 0;
  27          uint16_t VoltageOut = 0;
  28          
  29          typedef struct {
  30              uint8_t Task1;
  31              uint8_t Task2;
  32              uint8_t Task3;
  33              uint8_t Task4;
  34              uint8_t Task5;
  35          }_StrTask;
  36          _StrTask StrTask;
  37          
  38          volatile bit bFlagDelay = 0;
  39          volatile uint32_t uCountDelay = 0;
  40          uint16_t u16Cnt = 0;
  41          /* Main loop */
  42          
  43          
  44          void main(void) {
  45   1          Set_All_GPIO_Quasi_Mode;
  46   1          SystemInit();
  47   1          delay_ms(100);
  48   1          EN_DRV_LOW;
  49   1        //clr_LOAD;
  50   1        //clr_CLRPWM;
  51   1        //    PwmSet(10,BOOST,0);
  52   1      
  53   1          delay_ms(2000);
  54   1        //PWM0L = 50;
C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 2   

  55   1          while (1) {
  56   2                      
  57   2              switch (MainState) {
  58   3                  case STATE_0:{
  59   4                      while (1) {
  60   5                      Task1();
  61   5                      Task4();
  62   5                      //Task5();
  63   5                      if (MainState != STATE_0) {break;}
  64   5                    }
  65   4                    break;
  66   4                  }
  67   3                  case STATE_1:{
  68   4                      while (1) {
  69   5                      Task2();
  70   5                      Task4();
  71   5                      Task5();
  72   5                      if (MainState != STATE_0) {break;}
  73   5                    }
  74   4                    break;
  75   4                  }
  76   3                  case STATE_2:{
  77   4                      while (1) {
  78   5                      Task3();
  79   5                      Task4();
  80   5                      Task5();
  81   5                      if (MainState != STATE_0) {break;}
  82   5                    }
  83   4                    break;
  84   4                  }
  85   3              }
  86   2          }
  87   1      }
  88          
  89          
  90          /* Variable TIMER */
  91          volatile UINT8 u8TH0_Tmp, u8TL0_Tmp, u8TH1_Tmp, u8TL1_Tmp;
  92          /*********************************************************************************************************
             -***
  93           *              TIMER 0 interrupt subroutine
  94           *********************************************************************************************************
             -***/
  95          void Timer0_ISR(void) interrupt 1 //interrupt address is 0x000B
  96          {
  97   1          /* Reload counter */
  98   1          TH0 = u8TH0_Tmp;
  99   1          TL0 = u8TL0_Tmp;
 100   1          /* Increase system click and set flag task enable */
 101   1          sys_millis++;
 102   1          if (bFlagDelay == 1) {uCountDelay++;} 
 103   1              else {uCountDelay = 0;}
 104   1          if (sys_millis >= 10000) sys_millis = 0;
 105   1          if (sys_millis % TASK1 == 0) StrTask.Task1 = 1;
 106   1          if (sys_millis % TASK2 == 0) StrTask.Task2 = 1;
 107   1          if (sys_millis % TASK3 == 0) StrTask.Task3 = 1;
 108   1          if (sys_millis % TASK4 == 0) StrTask.Task4 = 1;
 109   1          if (sys_millis % TASK5 == 0) StrTask.Task5 = 1;
 110   1      }
 111          /*********************************************************************************************************
             -***
 112           *              TIMER 1 interrupt subroutine
 113           *********************************************************************************************************
C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 3   

             -***/
 114          #define  NUM_OF_CNT_ADC 100
 115          uint8_t u8AdcCnt = 0;
 116          
 117          uint16_t NumOfCntAdc_6 = 0;
 118          uint32_t TotalOfAdc_6 = 0;
 119          
 120          uint16_t NumOfCntAdc_5 = 0;
 121          uint32_t TotalOfAdc_5 = 0;
 122          
 123          void Timer1_ISR(void) interrupt 3
 124          {
 125   1          TH1 = u8TH1_Tmp;
 126   1          TL1 = u8TL1_Tmp;
 127   1              if(ADCF == 1){
 128   2                      switch (u8AdcCnt) {
 129   3                              case 0:{
 130   4                                      TotalOfAdc_5 += ADCRH * 16 + ADCRL;
 131   4                                      NumOfCntAdc_5++;
 132   4                                      if(NumOfCntAdc_5>=NUM_OF_CNT_ADC){
 133   5                                              VoltageOut = (uint16_t)(TotalOfAdc_5/NUM_OF_CNT_ADC);
 134   5                                              TotalOfAdc_5 = 0;
 135   5                                              NumOfCntAdc_5 = 0;
 136   5                                      }
 137   4                                      Disable_ADC;
 138   4                                      Enable_ADC_AIN6;
 139   4                                      clr_ADCF;
 140   4                                      set_ADCS;
 141   4                                      u8AdcCnt = 1;
 142   4                                      break;
 143   4                              }
 144   3                              case 1:{
 145   4                                      TotalOfAdc_6 += ADCRH * 16 + ADCRL;
 146   4                                      NumOfCntAdc_6++;
 147   4                                      if(NumOfCntAdc_6>=NUM_OF_CNT_ADC){
 148   5                                              VoltageIn = (uint16_t)(TotalOfAdc_6/NUM_OF_CNT_ADC);
 149   5                                              TotalOfAdc_6 = 0;
 150   5                                              NumOfCntAdc_6 = 0;
 151   5                                      }
 152   4                                      Disable_ADC;
 153   4                                      Enable_ADC_AIN5;
 154   4                                      clr_ADCF;
 155   4                                      set_ADCS;
 156   4                                      u8AdcCnt = 0;
 157   4                                      break;
 158   4                              }
 159   3                      }
 160   2              }
 161   1      }
 162          
 163          volatile uint8_t DRV_State = 0;
 164          void Task1(void) {
 165   1        if (StrTask.Task1 == 1) {
 166   2          if ((OutputEnable == 0)&&(DRV_State!=1)) {
 167   3                      PwmSet(5, 0);
 168   3                      DRV_State = 1;
 169   3          } 
 170   2          else if (OutputEnable == 1) {
 171   3                      if((DRV_State!=2)&&(VoltageIn<VIN_THRESHOLD))        //100% Duty Cycle - Vin<14.4
 172   3                      {
 173   4                              EN_DRV_LOW;
 174   4                              PWM0_P12_OUTPUT_DISABLE;
C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 4   

 175   4                              PWM1_P11_OUTPUT_DISABLE;
 176   4                              
 177   4                              PWM_L_LOW;
 178   4                              PWM_H_HIGH;
 179   4                              EN_DRV_HIGH;
 180   4                              DRV_State = 2;
 181   4                              
 182   4                              Duty_Ctr = MAX_DUTY_BOOST;
 183   4                      }
 184   3                      else if(VoltageIn>=VIN_THRESHOLD)      //Vin > 14.4
 185   3                      {
 186   4                              unsigned int duty_tmp;
 187   4                              duty_tmp = 1.0*MAX_CYCLE*VIN_OFFSET_ADC/VoltageIn;    //1446 => 13V ADC OFFSET
 188   4                              
 189   4                              if(duty_tmp<MIN_DUTY_BOOST){
 190   5                                      duty_tmp =  MIN_DUTY_BOOST;
 191   5                              }
 192   4                              
 193   4                              if(Duty_Ctr!=duty_tmp){
 194   5                                      if(Duty_Ctr>duty_tmp) Duty_Ctr--;
 195   5                                      else if(Duty_Ctr<duty_tmp)  Duty_Ctr++;
 196   5                                      
 197   5                                      PwmSet(Duty_Ctr, 1);
 198   5                                      DRV_State = 3;
 199   5                              }
 200   4                              else if(DRV_State!=3){
 201   5                                      PwmSet(Duty_Ctr, 1);
 202   5                                      DRV_State = 3;
 203   5                              }
 204   4                      }
 205   3          }
 206   2          StrTask.Task1 = 0;
 207   2        }
 208   1      }
 209          
 210          void Task2(void) {
 211   1        if (StrTask.Task2 == 1) {
 212   2      
 213   2          StrTask.Task2 = 0;
 214   2        }
 215   1      }
 216          
 217          void Task3(void) {
 218   1        if (StrTask.Task3 == 1) {
 219   2      
 220   2          StrTask.Task3 = 0;
 221   2        }
 222   1      }
 223          
 224          void Task4(void) {
 225   1              uint8_t i =0;
 226   1          if (StrTask.Task4 == 1) {
 227   2              if(strstr(cUartBuffer,"ON")!=NULL){
 228   3                  OutputEnable=1;
 229   3                  for(i=0;i<UART_BUFFER_MAX_CNT;i++){cUartBuffer[i]=0;}
 230   3                  u16Cnt=0;
 231   3              }
 232   2              else if(strstr(cUartBuffer,"OFF")!=NULL){
 233   3                  OutputEnable=0;
 234   3                  for(i=0;i<UART_BUFFER_MAX_CNT;i++){cUartBuffer[i]=0;}
 235   3                  u16Cnt=0;
 236   3              }
C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 5   

 237   2              StrTask.Task4 = 0;
 238   2          }
 239   1      }
 240          void Task5(void) {
 241   1        if (StrTask.Task5 == 1) {
 242   2      
 243   2          StrTask.Task5 = 0;
 244   2        }
 245   1      }
 246          
 247          void UartSendBuffer(void) {
 248   1      
 249   1      }
 250          
 251          void delay_us(uint16_t time) {
 252   1        uint16_t i;
 253   1        for (i = 0; i < time; i++) {
 254   2          ;
 255   2        }
 256   1      }
 257          
 258          void delay_ms(uint16_t x) {
 259   1        static uint32_t uDelay = 0;
 260   1        uDelay = x;
 261   1        bFlagDelay = 1;
 262   1        uCountDelay = 0;
 263   1        while (uCountDelay <= uDelay) {}
 264   1        bFlagDelay = 0;
 265   1      }
 266          
 267          
 268          void SerialPort0_ISR(void) interrupt 4 {
 269   1        if (RI == 1) {
 270   2          if (u16Cnt < UART_BUFFER_MAX_CNT) {
 271   3            cUartBuffer[u16Cnt] = SBUF;
 272   3            u16Cnt++;
 273   3          } else {
 274   3            u16Cnt = 0;
 275   3          }
 276   2          clr_RI;
 277   2        }
 278   1      
 279   1      }
 280          
 281          void WakeUp_Timer_ISR(void) interrupt 17 //ISR for self wake-up timer
 282          {
 283   1        //set_SWRST;
 284   1        clr_WKTF; //clear interrupt flag      
 285   1      }
 286          /////////////////////////////////////////////////////////////////////////////////////
 287          #ifdef USE_FULL_ASSERT
              
              /**
               * @brief       Reports the name of the source file and the source line number
               *       where the assert_param error has occurred.
               * @param file: pointer to the source file name
               * @param line: assert_param error line source number
               * @retval : None
               */
              void assert_failed(u8 * file, u32 line) {
                /* User can add his own implementation to report the file name and line number,
                ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
C51 COMPILER V9.60.0.0   MAIN                                                              05/14/2021 14:51:37 PAGE 6   

              
                /* Infinite loop */
                while (1) {}
              }
              #endif
 304          
 305          void PwmSet(uint8_t Duty, uint8_t Enable) {
 306   1          if (Enable == 0) {
 307   2              EN_DRV_LOW;
 308   2              PWM0_P12_OUTPUT_DISABLE;
 309   2              PWM1_P11_OUTPUT_DISABLE;
 310   2              PWM_H_LOW;
 311   2              PWM_L_LOW;
 312   2          } 
 313   1          else if (Enable == 1) {
 314   2              PWM0_P12_OUTPUT_ENABLE;
 315   2              PWM1_P11_OUTPUT_ENABLE;
 316   2              EN_DRV_HIGH;
 317   2              
 318   2                      PWM0H = HIBYTE(Duty);    
 319   2                      PWM0L = LOBYTE(Duty); //High driver
 320   2                      set_LOAD;
 321   2          }
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1165    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =    100    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
